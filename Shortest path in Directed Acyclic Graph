class Solution {
  public:
  
  
void dfs(int i , vector<int>&visited , stack<int>&s , vector < pair < int, int >> adj[])
{
    visited[i] = 1;
    
    for(auto it:adj[i])
    {
        
        int u = it.first;
        if(!visited[u])
        {
            dfs(u,visited , s , adj);
        }
      
    }
    
    s.push(i); 
   
}
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
    
    vector < pair < int, int >> adj[N];
     
     for(int i=0;i<edges.size();i++)
     {
    
         adj[edges[i][0]].push_back({edges[i][1] , edges[i][2]});
         
     }
     
     vector<int>visited(N,0);
     stack<int>s;
     
     for(int i=0;i<N;i++)
     {
         if(!visited[i])
         {
              dfs(i,visited , s, adj);
         }
     }
     
     
     vector<int>ans(N,1e9);
     
     ans[0] = {0};
     
     while(!s.empty())
     {
         int node = s.top();
         s.pop();
         
         for(auto it:adj[node])
         {
             int v = it.first;
             int wt = it.second;
             
             if(ans[node] + wt < ans[v])
             {
                 ans[v] = ans[node] + wt;
             }
         }
     }
     
     
     
   for(int i=0;i<N;i++)
   {
       if(ans[i] == 1e9)
       {
           ans[i] = -1;
       }
   }
    
    return ans;
    
    }
};
